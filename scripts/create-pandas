#!/usr/bin/env python3.7

from argparse import ArgumentParser
from mongoengine import connect
from datetime import datetime
import os

from devel_ball.create_pandas import (
    create_training_dataframe,
    create_predicting_dataframe,
)


if __name__ == '__main__':

    parser = ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--train', action='store_true', help='Create pandas dataframe for training a model on the season'
    )
    group.add_argument(
        '--predict-today', action='store_true', help='Create pandas dataframe for predicting today',
    )
    group.add_argument(
        '--predict-tomorrow', action='store_true', help='Create pandas dataframe for predicting tomorrow',
    )
    parser.add_argument(
        '--year',
        default='2020-21',
        help='Year to acquire player data for. Please use the format xxxx-xx, e.g. 2019-20.'
    )
    args = parser.parse_args()

    # Derive the current year
    today = datetime.today()
    if today.month >= 10:
        current_year = "{}-{}".format(today.year, str(today.year + 1)[2:])
    else:
        current_year = "{}-{}".format(today.year - 1, str(today.year)[2:])

    # Connect to the local mongo client and devel_ball database
    mongo_client = connect('devel_ball')
    if args.train:
        name = "{}/train/{}.p".format(os.environ.get("DEVEL_BALL_DATA_PATH"), args.year)
        create_training_dataframe(args.year, name)
    elif args.predict_today:
        name = "{}/predict/today.p".format(os.environ.get("DEVEL_BALL_DATA_PATH"))
        create_predicting_dataframe(current_year, name, today=True)
    elif args.predict_tomorrow:
        name = "{}/predict/tomorrow.p".format(os.environ.get("DEVEL_BALL_DATA_PATH"))
        create_predicting_dataframe(current_year, name, today=False)
