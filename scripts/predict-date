#!/usr/bin/env python3.7

import pandas as pd
from argparse import ArgumentParser
import datetime
from mongoengine import connect
import pickle
import os

from devel_ball.analysis import predict_from_model


if __name__ == '__main__':

    connect('devel_ball')

    parser = ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--today', action='store_true', help='Predict today.')
    group.add_argument('--tomorrow', action='store_true', help='Predict tomorrow.')
    parser.add_argument(
        '--model', default='2021-22_model.p', help='Name for the model to use for prediction'
    )
    args = parser.parse_args()

    # Get data to predict on
    if args.today:
        data_name = "{}/predict/today.p".format(os.environ.get("DEVEL_BALL_DATA_PATH"))
    else:
        data_name = "{}/predict/tomorrow.p".format(os.environ.get("DEVEL_BALL_DATA_PATH"))
    dk_players, data = pd.read_pickle(data_name)

    # Load the relevant model
    model_name = "{}/{}".format(os.environ.get("DEVEL_BALL_MODELS_PATH"), args.model)
    model, data_pipeline = pickle.load(open(model_name, 'rb'))

    # Get predictions
    predictions = predict_from_model(model, data_pipeline, data)

    # Put below in a function elsewhere
    prediction_map = {}
    for dk_player in dk_players:
        if dk_player.player_entry is not None and dk_player.player_entry.id in predictions:
            prediction = predictions[dk_player.player_entry.id]
        else:
            prediction = 0.0
        prediction_map[dk_player.dk_player_entry.id] = prediction

    sorted_prediction_map = dict(sorted(prediction_map.items(), key=lambda item: -item[1]))

    for player, prediction in sorted_prediction_map.items():
        print(player, prediction)

    import IPython; IPython.embed()
