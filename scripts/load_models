#!/usr/bin/env python3.7

from argparse import ArgumentParser
from mongoengine import connect

from devel_ball.model_loader import (
    get_gamedates,
    get_games,
)

if __name__ == '__main__':

    parser = ArgumentParser()
    parser.add_argument('--drop', default=[], nargs='*',
                        help='Which collections to drop, can specify \'all\', '
                             '\'all-except-game-dates\', or specific collections.'
                       )
    parser.add_argument('--years', default=['2018-19'], nargs='*',
                        help='Years to acquire player data for. Please use the'
                             ' format xxxx-xx, e.g. 2019-20.'
                       )
    parser.add_argument('--gamedates', action='store_true',
                        help='Get dates and games played on those dates.'
                       )
    parser.add_argument('--games', action='store_true',
                        help='Get all info and stats for games played on the '
                             'specified years.  Must have --gamedates already '
                             'fetched for this year.'
                       )
    args = parser.parse_args()

    # Connect to the local mongo client and devel_ball database
    mongo_client = connect('devel_ball')

    # Drop specified collections if desired
    drop = []
    if 'all' in args.drop:
        drop = mongo_client['devel_ball'].list_collection_names()
    elif 'all-except-game-dates' in args.drop:
        drop = mongo_client['devel_ball'].list_collection_names()
        drop.remove('game-date')
        drop.remove('season')
    else:
        drop = args.drop
    for collection in drop:
        mongo_client['devel_ball'].drop_collection(collection)

    # Call the requested data acquiring functions
    if args.gamedates:
        get_gamedates(args.years)
    if args.games:
        get_games(args.years)
